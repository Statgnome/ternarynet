% automatic manuscript creation for frma
% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
%\VignetteIndexEntry{ternarynet: A Computational Bayesian Approach to Ternary Network Estimation}
%\VignetteDepends{ternarynet}
%\VignettePackage{ternarynet}
\documentclass[12pt]{article}
\usepackage{hyperref}
\usepackage[authoryear, round]{natbib}

\textwidth=6.2in
\textheight=8.5in
\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand\Rpackage[1]{{\textsf{#1}\index{#1 (package)}}}
\newcommand\dataset[1]{{\textit{#1}\index{#1 (data set)}}}
\newcommand\Rclass[1]{{\textit{#1}\index{#1 (class)}}}
\newcommand\Rfunction[1]{{{\small\texttt{#1}}\index{#1 (function)}}}
\newcommand\Rfunarg[1]{{\small\texttt{#1}}}
\newcommand\Robject[1]{{\small\texttt{#1}}}

\author{Matthew N. McCall and Anthony Almudevar}

\begin{document}
\title{A Computational Bayesian Approach to Ternary Network Estimation (ternarynet)}
\maketitle
\tableofcontents

\newpage

\section{Introduction}

This document describes \Rpackage{ternarynet}, which implements a
computational Bayesian algorithm to estimate a ternary network from
perturbation data. We strong recommend reading the paper,
\emph{Fitting Boolean Networks from Steady State Perturbation Data}
(Almudevar \emph{et. al} 2011) before proceeding with this vignette.

\section{Getting Started}
First begin by downloading and installing the ternarynet package.
<<echo=T,results=hide>>=
library(ternarynet)
@ 

\subsection{Basic Input Data}
The input data to the main ternarynet functions are a matrix of steady
state observations and a matrix of perturbation experiments, where
columns represent perturbation experiments and rows represent measured
genes. The perturbation matrix consists of all zeros except for those
genes experimentally perturbed, which are denoted by 1 if
overexpressed or -1 if underexpressed. The steady state matrix
consists of the response of each measured gene to each
perturbation. Note that the perturbed gene(s) in each experiment are
forced to response. For example if we perturb each of five genes by
over-expressing each one, the perturbation matrix
would be:
<<echo=F,results=hide>>=
perturbationObj <- matrix(c(
1,0,0,0,0,	
0,1,0,0,0,	
0,0,1,0,0,	
0,0,0,1,0,
0,0,0,0,1),nrow=5,ncol=5,byrow=T)	
@ 
<<echo=T>>=
perturbationObj
@ 

A potential steady state matrix based on the perturbation experiments above is:
<<echo=F,results=hide>>=
steadyStateObj<-matrix(c(
 1, 0, 0, 0, 0,	
 0, 1, 1, 1, 0,
 0, 1, 1, 1, 0,	
 0, 1, 1, 1, 0,
 1, 0, 0, 0, 1),nrow=5,ncol=5,byrow=T)
@ 
<<echo=T>>=
steadyStateObj
@ 

We can interpret the first perturbation experiment, persistent
over-expression of gene~1 (column~1), as resulting in over-expression
of gene~5.

\subsection{Model Fitting}
There are numerous modeling parameters that we could alter (these are
outlined in the help files and described in Almudevar et al. (2011)),
but in this example, we will call the ternary network fit using the
default parameters (except for setting the random seed):
<<echo=T,results=hide>>=
tnfit <- tnetfit(steadyStateObj, perturbationObj, xSeed=11235)
@ 

This creates a ternaryFit object, tnfit, that contains the results of
the model fitting. We can assess the model fit by examining the traces
of four key parameters:
<<echo=T>>=
plotTraces(tnfit)
@ 

\subsection{Parallel fit}

The \texttt{parallelFit} function uses the replica exchange algorithm.  
The function takes the following arguments:
\begin{description}
    \item[\texttt{experiment\_set}]data frame containing five columns: 
        \begin{description}
            \item[\texttt{i\_exp}] an experiment index:
                an integer from 0 to $N_{\textrm{exp}}-1$,
                where $N_{\textrm{exp}}$ is the number of experiments.
            \item[\texttt{i\_node}] a node index: an integer from
                0 to $N_{\textrm{node}}-1$,
                where $N_{\textrm{node}}$ is the number of nodes.
            \item[\texttt{outcome}] a value of -1, 0, or +1, denoting a
                particular outcome for
                that node in that experiment
            \item[\texttt{value}] a cost for obtaining that outcome.
                For instance, if the cost function
                is the Hamming distance, and the observed outcome is +1,
                the cost would be would be +2, +1, or 0 for an 
                outcome of -1, 0, or +1, respectively.
            \item[\texttt{is\_perturbation}] a Boolean value 
                (or a value of 0/1) denoting whether this 
                outcome is due to an applied perturbation or not.
        \end{description}
    \item[\texttt{max\_parents}]maximum number of parents 
                                allowed for each node
    \item[\texttt{n\_cycles}]maximum number of Monte Carlo cycles
    \item[\texttt{n\_write}]number of times to write output during the run
    \item[\texttt{T\_lo}]T for lowest-temperature replica
    \item[\texttt{T\_h}]T for highest-temperature replica
    \item[\texttt{target\_score}] run will terminate if this is reached
    \item[\texttt{n\_proc}]number of replicas
    \item[\texttt{logfile}]filename for log file
    \item[\texttt{seed}]seed for random number generator
\end{description}

The return value is a list with an element for each replica.  Each
element is itself a list of the best unnormalized score, normalized
score (unnormalized score divided by product of number of nodes and
number of experiments), list of parents for each node, and array
describing the transition rule, giving the outcome of a node for each
possible configuration of parent nodes.

\subsubsection{Example}

The following shows a subset of the simple model regulatory network
given in Example 1 of Reference 1 (nodes 1-4 only).  There are four
nodes and eight experiments (the first four rows of Table 4).  
The cost function for each possible outcome is the Hamming distance 
with the observed steady-state outcome, given a persistent perturbation.
The output corresponds with the parents and transitions described on page 13
of Reference 1.

<<echo=T>>=

library(ternarynet)

i_exp <- as.integer(c(0,0,0, 0,0,0, 0,0,0, 0,0,0,
                        1,1,1, 1,1,1, 1,1,1, 1,1,1,
                        2,2,2, 2,2,2, 2,2,2, 2,2,2,
                        3,3,3, 3,3,3, 3,3,3, 3,3,3,
                        4,4,4, 4,4,4, 4,4,4, 4,4,4,
                        5,5,5, 5,5,5, 5,5,5, 5,5,5,
                        6,6,6, 6,6,6, 6,6,6, 6,6,6,
                        7,7,7, 7,7,7, 7,7,7, 7,7,7))

i_node <- as.integer(c(0,0,0, 1,1,1, 2,2,2, 3,3,3,
                        0,0,0, 1,1,1, 2,2,2, 3,3,3,
                        0,0,0, 1,1,1, 2,2,2, 3,3,3,
                        0,0,0, 1,1,1, 2,2,2, 3,3,3,
                        0,0,0, 1,1,1, 2,2,2, 3,3,3,
                        0,0,0, 1,1,1, 2,2,2, 3,3,3,
                        0,0,0, 1,1,1, 2,2,2, 3,3,3,
                        0,0,0, 1,1,1, 2,2,2, 3,3,3))

outcome <- as.integer(c(-1,0,1, -1,0,1, -1,0,1, -1,0,1,
                        -1,0,1, -1,0,1, -1,0,1, -1,0,1,
                        -1,0,1, -1,0,1, -1,0,1, -1,0,1,
                        -1,0,1, -1,0,1, -1,0,1, -1,0,1,
                        -1,0,1, -1,0,1, -1,0,1, -1,0,1,
                        -1,0,1, -1,0,1, -1,0,1, -1,0,1,
                        -1,0,1, -1,0,1, -1,0,1, -1,0,1,
                        -1,0,1, -1,0,1, -1,0,1, -1,0,1))

value <- c(0,1,2, 0,1,2, 0,1,2, 0,1,2,
            2,1,0, 0,1,2, 0,1,2, 0,1,2,
            2,1,0, 2,1,0, 0,1,2, 0,1,2,
            2,1,0, 2,1,0, 2,1,0, 0,1,2,
            2,1,0, 2,1,0, 2,1,0, 2,1,0,
            0,1,2, 2,1,0, 2,1,0, 2,1,0,
            0,1,2, 0,1,2, 2,1,0, 2,1,0,
            0,1,2, 0,1,2, 0,1,2, 2,1,0)

is_perturbation <- 
c(TRUE,TRUE,TRUE,  FALSE,FALSE,FALSE, FALSE,FALSE,FALSE, FALSE,FALSE,FALSE,
    FALSE,FALSE,FALSE,  TRUE,TRUE,TRUE, FALSE,FALSE,FALSE, FALSE,FALSE,FALSE,
    FALSE,FALSE,FALSE,  FALSE,FALSE,FALSE, TRUE,TRUE,TRUE, FALSE,FALSE,FALSE,
    FALSE,FALSE,FALSE,  FALSE,FALSE,FALSE, FALSE,FALSE,FALSE, TRUE,TRUE,TRUE,
    TRUE,TRUE,TRUE,  FALSE,FALSE,FALSE, FALSE,FALSE,FALSE, FALSE,FALSE,FALSE,
    FALSE,FALSE,FALSE,  TRUE,TRUE,TRUE, FALSE,FALSE,FALSE, FALSE,FALSE,FALSE,
    FALSE,FALSE,FALSE,  FALSE,FALSE,FALSE, TRUE,TRUE,TRUE, FALSE,FALSE,FALSE,
    FALSE,FALSE,FALSE,  FALSE,FALSE,FALSE, FALSE,FALSE,FALSE, TRUE,TRUE,TRUE)

indata <- data.frame(i_exp,i_node,outcome,value,is_perturbation)

results <- parallelFit(indata,
                        max_parents=1,
                        n_cycles=100000,
                        n_write=10,
                        T_lo=0.001,
                        T_hi=2.0,
                        target_score=0,
                        n_proc=3,
                        logfile='try.log',
                        seed=1234)

lowest_temp_results <- results[[1]]

print('Unnormalized score:')
print(lowest_temp_results$unnormalized_score)

print('Normalized score:')
print(lowest_temp_results$normalized_score)

print('Parents:')
print(lowest_temp_results$parents)

print('Outcomes:')
print(lowest_temp_results$outcomes)

@



\subsection{Posterior Sampling}
Once we have fit the ternary network model, we can sample from the
posterior density on the model space:
<<echo=T,results=hide>>=
tnpost <- tnetpost(tnfit, xSeed=11235)
@ 





\subsection{Summary Results}
The ternaryPosterior object contains a wealth of information that can
be used to answer a wide variety of statistical and biological
questions; however, it is often convenient to summarize this
information. The first summarization we will consider is reporting the
posterior probabilities of the attractors resulting from either
transient or persistent perturbations. These summaries can be produced
as follows:
<<echo=T>>=
attractorSummary(tnpost)
attractorSummary(tnpost, wildtype=FALSE)
@ 

The first summary provides the attractors for a transient perturbation
(the response of the wildtype network) and second summary for a
persistent perturbation. The first column provides the number of the
perturbation experiment (corresponding to the columns in the
perturbation matrix), and the last column provide the posterior
probability of each attractor. The middle columns are a summary of
each attractor, as described in Almudevar et al. (2011).

In addition to investigating the attractor structure, one might also
want to examine the network topology. A simple summary of the topology
can be generated as follows:
<<echo=T>>=
graphPosterior(tnpost)
@ 

This produces a matrix where rows are children and columns are parents
of regulatory relationships. The values in the matrix are the marginal
posterior probabilities of each relationship. The first column
represents the probability of a given gene having no parents. 

\newpage

\section{Session Info}
<<echo=T>>=
sessionInfo()
@ 

\end{document}
